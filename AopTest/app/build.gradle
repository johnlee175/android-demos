apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {
        applicationId "com.johnsoft.app.aoptest2"
        minSdkVersion 14
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }
    compileOptions {
        def uniqueJavaVersion = JavaVersion.VERSION_1_7
        sourceCompatibility uniqueJavaVersion
        targetCompatibility uniqueJavaVersion
    }
}

dependencies {
    compile 'com.android.support:appcompat-v7:23.4.0'
    compile "org.aspectj:aspectjrt:${aspectj_version}"
    // Use libs/*.jar first, after the first build, the ajc-libs will be created,
    // and you can choose to copy ajc-libs/*.jar to libs/, or comment the following two line, add ajc-libs dependencies.
//    compile files('libs/android-async-http-1.4.9.jar')
//    compile files('libs/httpclient-4.3.6.jar')
    compile files('ajc-libs/android-async-http-1.4.9.jar')
    compile files('ajc-libs/httpclient-4.3.6.jar')
}

import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

android.applicationVariants.all { variant ->
    if (!variant.buildType.isDebuggable()) {
        logger.info("Skipping non-debuggable build type '${variant.buildType.name}'.")
        return;
    }

    JavaCompile javaCompile = variant.javaCompile
    javaCompile.doLast(new Action<Task>() {
        @Override
        void execute(Task task) {
            MessageHandler handler = new MessageHandler(true)
            String[] args = ["-showWeaveInfo",
                             "-1.5",
                             "-inpath", javaCompile.destinationDir.toString(),
                             "-d", javaCompile.destinationDir.toString(),
                             "-aspectpath", javaCompile.destinationDir.toString(),
                             "-classpath", javaCompile.classpath.asPath,
                             "-bootclasspath", android.bootClasspath.join(File.pathSeparator)]
            runAjc(args, handler)
            File appLibs = new File(projectDir, "libs");
            File appAjcLibs = new File(projectDir, "ajc-libs");
            if (!appAjcLibs.exists()) {
                appAjcLibs.mkdirs()
                logger.info "run ajc from libs/*.jar to ajc-libs/*.jar ..."
                appLibs.listFiles().collect { file ->
                    args[3] = file.absolutePath
                    args[4] = "-outjar"
                    args[5] = new File(appAjcLibs, file.name).absolutePath
                    runAjc(args, handler)
                }
            }
        }
        // If you see such a description:
        // "advice defined in aspectj.XXXAspect has not been applied [Xlint:adviceDidNotMatch]",
        // may be LogLevel.INFO's message will be helpful, they'll tell you which classes woven and why print adviceDidNotMatch.
        // For the message which be print by "logger.info" show, just open Preferences or Settings page, and follow:
        // "Build, Execution, Deployment" -> "Compiler" -> "Command-line Options",
        // now input "--info" or "--debug" and click "Apply" button;
        private void runAjc(String[] args, MessageHandler handler) {
            logger.info "ajc args: " + Arrays.toString(args)
            new Main().run(args, handler)
            for (IMessage message : handler.getMessages(null, true)) {
                switch (message.getKind()) {
                    case IMessage.ABORT:
                    case IMessage.FAIL:
                    case IMessage.ERROR:
                    case IMessage.WARNING:
                        logger.error message.message, message.thrown
                        break;
                    case IMessage.INFO:
                    case IMessage.DEBUG:
                        logger.info message.message, message.thrown
                        break;
                }
            }
        }
    })
}
